---
import type { GetStaticPaths, MarkdownInstance, Page } from "astro";
import BaseLayout from "../../layouts/BaseLayout.astro";
import BlogContainer from "../../components/BlogContainer.astro";

export const getStaticPaths = (async () => {
    const pageSize = Number(import.meta.env.PAGE_SIZE) || 10;
    const allPosts: MarkdownInstance<Record<string, any>>[] =
        await Astro.glob("../posts/*.md");
    const uniqueTags = [
        ...new Set(allPosts.map((post) => post.frontmatter.tags).flat()),
    ];
    return uniqueTags.flatMap((tag) => {
        const filteredPosts = allPosts
            .filter((post) => post.frontmatter.tags.includes(tag))
            .sort((a, b) => {
                return new Date(b.frontmatter.pubDate).getTime() -
                    new Date(a.frontmatter.pubDate).getTime();
            });

        const page = {
            data: filteredPosts.slice(0, pageSize),
            start: 0,
            end: pageSize,
            size: pageSize,
            total: filteredPosts.length,
            currentPage: 1,
            lastPage: Math.ceil(filteredPosts.length / pageSize),
            url: {
                current: `/tags/${tag}`,
                prev: undefined,
                next: filteredPosts.length > pageSize ? `/tags/${tag}/2` : undefined,
            },
        };
        return {
            params: { tag },
            props: { page }
        };
    });
});

const { tag } = Astro.params;
const { page } = Astro.props;
---

<BaseLayout pageTitle={`Posts tagged with "${tag}"`}>
    <BlogContainer page={page} />
</BaseLayout>
